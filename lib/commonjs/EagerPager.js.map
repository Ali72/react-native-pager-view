{"version":3,"sources":["EagerPager.tsx"],"names":["EagerPager","React","PureComponent","isScrolling","event","props","onPageScroll","keyboardDismissMode","Keyboard","dismiss","onPageScrollStateChanged","nativeEvent","pageScrollState","componentDidMount","initialPage","setPage","page","animated","UIManager","dispatchViewManagerCommand","Commands","setPageWithoutAnimation","setScrollEnabled","scrollEnabled","render","keys","children","Children","count","offscreenPageLimit","onMoveShouldSetResponderCapture","onPageSelected","orientation","overdrag","pageMargin","showPageIndicator","style","transitionStyle"],"mappings":";;;;;;;AAAA;;AACA;;AAMA;;AAEA;;;;;;AAEO,MAAMA,UAAN,SAAyBC,eAAMC,aAA/B,CAA8D;AAAA;AAAA;;AAAA,yCAC7C,KAD6C;;AAAA,6DA2CzB,MAAM,KAAKC,WA3Cc;;AAAA,0CA6C3CC,KAAD,IAAuC;AAAA;;AAC5D,mDAAKC,KAAL,EAAWC,YAAX,kGAA0BF,KAA1B;;AACA,UAAI,KAAKC,KAAL,CAAWE,mBAAX,KAAmC,SAAvC,EAAkD;AAChDC,8BAASC,OAAT;AACD;AACF,KAlDkE;;AAAA,sDAqDjEL,KADiC,IAE9B;AAAA;;AACH,qDAAKC,KAAL,EAAWK,wBAAX,qGAAsCN,KAAtC;AACA,WAAKD,WAAL,GAAmBC,KAAK,CAACO,WAAN,CAAkBC,eAAlB,KAAsC,UAAzD;AACD,KAzDkE;AAAA;;AAGnEC,EAAAA,iBAAiB,GAAG;AAClB,QAAI,KAAKR,KAAL,CAAWS,WAAX,IAA0B,IAA1B,IAAkC,KAAKT,KAAL,CAAWS,WAAX,GAAyB,CAA/D,EAAkE;AAChE,WAAKC,OAAL,CAAa,KAAKV,KAAL,CAAWS,WAAxB,EAAqC,KAArC;AACD;AACF;AAED;AACF;AACA;AACA;;;AACEC,EAAAA,OAAO,CAACC,IAAD,EAAeC,QAAQ,GAAG,IAA1B,EAAgC;AACrCC,2BAAUC,0BAAV,CACE,iCAAe,IAAf,CADF,EAEE,6CAAuBC,QAAvB,CAAgCL,OAFlC,EAGE,CAACC,IAAD,EAAOC,QAAP,CAHF;AAKD;AAED;AACF;AACA;AACA;;;AACEI,EAAAA,uBAAuB,CAACL,IAAD,EAAe;AACpC,SAAKD,OAAL,CAAaC,IAAb,EAAmB,KAAnB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEM,EAAAA,gBAAgB,CAACC,aAAD,EAAyB;AACvCL,2BAAUC,0BAAV,CACE,iCAAe,IAAf,CADF,EAEE,6CAAuBC,QAAvB,CAAgCE,gBAFlC,EAGE,CAACC,aAAD,CAHF;AAKD;;AAkBDC,EAAAA,MAAM,GAAG;AACP,UAAMC,IAAI,GAAG,+BAAmB,KAAKpB,KAAL,CAAWqB,QAA9B,CAAb;AAEA,wBACE,6BAAC,qCAAD;AACE,MAAA,YAAY,EAAED,IADhB;AAEE,MAAA,KAAK,EAAExB,eAAM0B,QAAN,CAAeC,KAAf,CAAqB,KAAKvB,KAAL,CAAWqB,QAAhC,CAFT;AAGE,MAAA,kBAAkB,EAAE,KAAKrB,KAAL,CAAWwB,kBAHjC;AAIE,MAAA,MAAM,EAAE,CAJV;AAKE,MAAA,+BAA+B,EAAE,KAAKC,+BALxC;AAME,MAAA,YAAY,EAAE,KAAKxB,YANrB;AAOE,MAAA,wBAAwB,EAAE,KAAKI,wBAPjC;AAQE,MAAA,cAAc,EAAE,KAAKL,KAAL,CAAW0B,cAR7B;AASE,MAAA,WAAW,EAAE,KAAK1B,KAAL,CAAW2B,WAT1B;AAUE,MAAA,QAAQ,EAAE,KAAK3B,KAAL,CAAW4B,QAVvB;AAWE,MAAA,UAAU,EAAE,KAAK5B,KAAL,CAAW6B,UAXzB;AAYE,MAAA,aAAa,EAAE,KAAK7B,KAAL,CAAWkB,aAZ5B;AAaE,MAAA,iBAAiB,EAAE,KAAKlB,KAAL,CAAW8B,iBAbhC;AAcE,MAAA,KAAK,EAAE,KAAK9B,KAAL,CAAW+B,KAdpB;AAeE,MAAA,eAAe,EAAE,KAAK/B,KAAL,CAAWgC;AAf9B,OAiBG,KAAKhC,KAAL,CAAWqB,QAjBd,CADF;AAqBD;;AAnFkE","sourcesContent":["import React from 'react';\nimport { findNodeHandle, Keyboard, UIManager } from 'react-native';\nimport type {\n  EagerPagerProps,\n  PagerViewOnPageScrollEvent,\n  PageScrollStateChangedNativeEvent,\n} from './types';\nimport { getReactStringKeys } from './utils';\n\nimport { getViewManagerConfig, PagerViewViewManager } from './PagerViewNative';\n\nexport class EagerPager extends React.PureComponent<EagerPagerProps> {\n  private isScrolling = false;\n\n  componentDidMount() {\n    if (this.props.initialPage != null && this.props.initialPage > 0) {\n      this.setPage(this.props.initialPage, false);\n    }\n  }\n\n  /**\n   * A helper function to scroll to a specific page in the PagerView.\n   * Default to animated transition between pages.\n   */\n  setPage(page: number, animated = true) {\n    UIManager.dispatchViewManagerCommand(\n      findNodeHandle(this),\n      getViewManagerConfig().Commands.setPage,\n      [page, animated]\n    );\n  }\n\n  /**\n   * A helper function to scroll to a specific page in the PagerView.\n   * The transition between pages will *not* be animated.\n   */\n  setPageWithoutAnimation(page: number) {\n    this.setPage(page, false);\n  }\n\n  /**\n   * A helper function to enable/disable scroll imperatively.\n   * The recommended way is using the scrollEnabled prop, however, there might\n   * be a case where an imperative solution is more useful (e.g. for not\n   * blocking an animation)\n   */\n  setScrollEnabled(scrollEnabled: boolean) {\n    UIManager.dispatchViewManagerCommand(\n      findNodeHandle(this),\n      getViewManagerConfig().Commands.setScrollEnabled,\n      [scrollEnabled]\n    );\n  }\n\n  private onMoveShouldSetResponderCapture = () => this.isScrolling;\n\n  private onPageScroll = (event: PagerViewOnPageScrollEvent) => {\n    this.props.onPageScroll?.(event);\n    if (this.props.keyboardDismissMode === 'on-drag') {\n      Keyboard.dismiss();\n    }\n  };\n\n  private onPageScrollStateChanged = (\n    event: PageScrollStateChangedNativeEvent\n  ) => {\n    this.props.onPageScrollStateChanged?.(event);\n    this.isScrolling = event.nativeEvent.pageScrollState === 'dragging';\n  };\n\n  render() {\n    const keys = getReactStringKeys(this.props.children);\n\n    return (\n      <PagerViewViewManager\n        childrenKeys={keys}\n        count={React.Children.count(this.props.children)}\n        offscreenPageLimit={this.props.offscreenPageLimit}\n        offset={0}\n        onMoveShouldSetResponderCapture={this.onMoveShouldSetResponderCapture}\n        onPageScroll={this.onPageScroll}\n        onPageScrollStateChanged={this.onPageScrollStateChanged}\n        onPageSelected={this.props.onPageSelected}\n        orientation={this.props.orientation}\n        overdrag={this.props.overdrag}\n        pageMargin={this.props.pageMargin}\n        scrollEnabled={this.props.scrollEnabled}\n        showPageIndicator={this.props.showPageIndicator}\n        style={this.props.style}\n        transitionStyle={this.props.transitionStyle}\n      >\n        {this.props.children}\n      </PagerViewViewManager>\n    );\n  }\n}\n"]}