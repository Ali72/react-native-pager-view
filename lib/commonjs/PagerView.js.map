{"version":3,"sources":["PagerView.tsx"],"names":["PagerView","React","PureComponent","constructor","props","isScrolling","event","onPageScroll","keyboardDismissMode","Keyboard","dismiss","onPageScrollStateChanged","nativeEvent","pageScrollState","currentPage","position","setState","prevState","computeRenderWindow","buffer","maxRenderWindow","offset","windowLength","onPageSelected","state","initialPage","componentDidMount","UIManager","dispatchViewManagerCommand","Commands","setPage","page","animated","data","length","requestAnimationFrame","setPageWithoutAnimation","setScrollEnabled","scrollEnabled","Math","max","min","floor","renderChildren","keys","children","slice","map","item","index","key","keyExtractor","push","styles","pageContainer","renderItem","render","offscreenPageLimit","onMoveShouldSetResponderCapture","orientation","overdrag","pageMargin","showPageIndicator","style","transitionStyle","StyleSheet","create","height","width"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  findNodeHandle,\n  Keyboard,\n  StyleSheet,\n  UIManager,\n  View,\n} from 'react-native';\nimport type {\n  PagerViewOnPageScrollEvent,\n  PagerViewOnPageSelectedEvent,\n  PagerViewProps,\n  PagerViewState,\n  PageScrollStateChangedNativeEvent,\n} from './types';\n\nimport { getViewManagerConfig, PagerViewViewManager } from './PagerViewNative';\n\ntype RenderWindowData = {\n  buffer: number | undefined;\n  currentPage: number;\n  maxRenderWindow: number | undefined;\n  offset: number;\n  windowLength: number;\n};\n\nexport class PagerView<ItemT> extends React.PureComponent<\n  PagerViewProps<ItemT>,\n  PagerViewState\n> {\n  private isScrolling = false;\n\n  constructor(props: PagerViewProps<ItemT>) {\n    super(props);\n    this.state = this.computeRenderWindow({\n      buffer: props.buffer,\n      currentPage: props.initialPage ?? 0,\n      maxRenderWindow: props.maxRenderWindow,\n      offset: 0,\n      windowLength: 0,\n    });\n  }\n\n  componentDidMount() {\n    if (this.props.initialPage) {\n      // Send command directly; render window already contains destination.\n      UIManager.dispatchViewManagerCommand(\n        findNodeHandle(this),\n        getViewManagerConfig().Commands.setPage,\n        [this.props.initialPage, false]\n      );\n    }\n  }\n\n  /**\n   * A helper function to scroll to a specific page in the PagerView.\n   * Default to animated transition between pages.\n   */\n  setPage(page: number, animated = true) {\n    if (page < 0 || page >= this.props.data.length) {\n      return;\n    }\n\n    // Start rendering the destination.\n    this.setState((prevState) =>\n      this.computeRenderWindow({\n        buffer: this.props.buffer,\n        currentPage: page,\n        maxRenderWindow: this.props.maxRenderWindow,\n        offset: prevState.offset,\n        windowLength: prevState.windowLength,\n      })\n    );\n    // Send paging command.\n    requestAnimationFrame(() => {\n      UIManager.dispatchViewManagerCommand(\n        findNodeHandle(this),\n        getViewManagerConfig().Commands.setPage,\n        [page, animated]\n      );\n    });\n  }\n\n  /**\n   * A helper function to scroll to a specific page in the PagerView.\n   * The transition between pages will *not* be animated.\n   */\n  setPageWithoutAnimation(page: number) {\n    this.setPage(page, false);\n  }\n\n  /**\n   * A helper function to enable/disable scroll imperatively.\n   * The recommended way is using the scrollEnabled prop, however, there might\n   * be a case where an imperative solution is more useful (e.g. for not\n   * blocking an animation)\n   */\n  setScrollEnabled(scrollEnabled: boolean) {\n    UIManager.dispatchViewManagerCommand(\n      findNodeHandle(this),\n      getViewManagerConfig().Commands.setScrollEnabled,\n      [scrollEnabled]\n    );\n  }\n\n  /**\n   * Compute desired render window size.\n   *\n   * Returns `offset` and `windowLength` unmodified, unless in conflict with\n   * restrictions from `buffer` or `maxRenderWindow`.\n   */\n  private computeRenderWindow(data: RenderWindowData): PagerViewState {\n    const buffer = Math.max(data.buffer ?? 1, 1);\n    let offset = Math.max(Math.min(data.offset, data.currentPage - buffer), 0);\n    let windowLength =\n      Math.max(data.offset + data.windowLength, data.currentPage + buffer + 1) -\n      offset;\n\n    let maxRenderWindow = data.maxRenderWindow ?? 0;\n    if (maxRenderWindow !== 0) {\n      maxRenderWindow = Math.max(maxRenderWindow, 1 + 2 * buffer);\n      if (windowLength > maxRenderWindow) {\n        offset = data.currentPage - Math.floor(maxRenderWindow / 2);\n        windowLength = maxRenderWindow;\n      }\n    }\n\n    return { offset, windowLength };\n  }\n\n  private onMoveShouldSetResponderCapture = () => this.isScrolling;\n\n  private onPageScroll = (event: PagerViewOnPageScrollEvent) => {\n    this.props.onPageScroll?.(event);\n    if (this.props.keyboardDismissMode === 'on-drag') {\n      Keyboard.dismiss();\n    }\n  };\n\n  private onPageScrollStateChanged = (\n    event: PageScrollStateChangedNativeEvent\n  ) => {\n    this.props.onPageScrollStateChanged?.(event);\n    this.isScrolling = event.nativeEvent.pageScrollState === 'dragging';\n  };\n\n  private onPageSelected = (event: PagerViewOnPageSelectedEvent) => {\n    const currentPage = event.nativeEvent.position;\n    this.setState((prevState) =>\n      this.computeRenderWindow({\n        buffer: this.props.buffer,\n        currentPage,\n        maxRenderWindow: this.props.maxRenderWindow,\n        offset: prevState.offset,\n        windowLength: prevState.windowLength,\n      })\n    );\n    this.props.onPageSelected?.(event);\n  };\n\n  private renderChildren(offset: number, windowLength: number) {\n    const keys: string[] = [];\n    return {\n      children: this.props.data\n        .slice(offset, offset + windowLength)\n        .map((item, index) => {\n          const key = this.props.keyExtractor(item, offset + index);\n          keys.push(key);\n          return (\n            <View collapsable={false} key={key} style={styles.pageContainer}>\n              {this.props.renderItem({ item, index: offset + index })}\n            </View>\n          );\n        }),\n      keys,\n    };\n  }\n\n  render() {\n    const { offset, windowLength } = this.state;\n    const { children, keys } = this.renderChildren(offset, windowLength);\n\n    return (\n      <PagerViewViewManager\n        childrenKeys={keys}\n        count={this.props.data.length}\n        offscreenPageLimit={this.props.offscreenPageLimit}\n        offset={offset}\n        onMoveShouldSetResponderCapture={this.onMoveShouldSetResponderCapture}\n        onPageScroll={this.onPageScroll}\n        onPageScrollStateChanged={this.onPageScrollStateChanged}\n        onPageSelected={this.onPageSelected}\n        orientation={this.props.orientation}\n        overdrag={this.props.overdrag}\n        pageMargin={this.props.pageMargin}\n        scrollEnabled={this.props.scrollEnabled}\n        showPageIndicator={this.props.showPageIndicator}\n        style={this.props.style}\n        transitionStyle={this.props.transitionStyle}\n      >\n        {children}\n      </PagerViewViewManager>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  pageContainer: { height: '100%', position: 'absolute', width: '100%' },\n});\n"]}