{"version":3,"sources":["PagerView.tsx"],"names":["React","findNodeHandle","Keyboard","StyleSheet","UIManager","View","PagerViewNative","PagerView","PureComponent","constructor","props","isScrolling","event","onPageScroll","keyboardDismissMode","dismiss","onPageScrollStateChanged","nativeEvent","pageScrollState","currentPage","position","setState","prevState","computeRenderWindow","buffer","maxRenderWindow","offset","windowLength","onPageSelected","state","initialPage","componentDidMount","dispatchViewManagerCommand","setPage","page","animated","data","length","requestAnimationFrame","setPageWithoutAnimation","setScrollEnabled","scrollEnabled","Math","max","min","floor","renderChildren","keys","children","slice","map","item","index","key","keyExtractor","push","styles","pageContainer","renderItem","render","offscreenPageLimit","onMoveShouldSetResponderCapture","orientation","overdrag","pageMargin","showPageIndicator","style","transitionStyle","create","height","width"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  findNodeHandle,\n  Keyboard,\n  StyleSheet,\n  UIManager,\n  View,\n} from 'react-native';\nimport type {\n  PagerViewOnPageScrollEvent,\n  PagerViewOnPageSelectedEvent,\n  PagerViewProps,\n  PagerViewState,\n  PageScrollStateChangedNativeEvent,\n} from './types';\n\nimport { PagerViewNative } from './PagerViewNative';\n\ntype RenderWindowData = {\n  buffer: number | undefined;\n  currentPage: number;\n  maxRenderWindow: number | undefined;\n  offset: number;\n  windowLength: number;\n};\n\nexport class PagerView<ItemT> extends React.PureComponent<\n  PagerViewProps<ItemT>,\n  PagerViewState\n> {\n  private isScrolling = false;\n\n  constructor(props: PagerViewProps<ItemT>) {\n    super(props);\n    this.state = this.computeRenderWindow({\n      buffer: props.buffer,\n      currentPage: props.initialPage ?? 0,\n      maxRenderWindow: props.maxRenderWindow,\n      offset: 0,\n      windowLength: 0,\n    });\n  }\n\n  componentDidMount() {\n    if (this.props.initialPage != null && this.props.initialPage > 0) {\n      // Send command directly; render window already contains destination.\n      UIManager.dispatchViewManagerCommand(findNodeHandle(this), 'setPage', [\n        this.props.initialPage,\n        false,\n      ]);\n    }\n  }\n\n  /**\n   * A helper function to scroll to a specific page in the PagerView.\n   * Default to animated transition between pages.\n   */\n  setPage(page: number, animated = true) {\n    if (page < 0 || page >= this.props.data.length) {\n      return;\n    }\n\n    // Start rendering the destination.\n    this.setState((prevState) =>\n      this.computeRenderWindow({\n        buffer: this.props.buffer,\n        currentPage: page,\n        maxRenderWindow: this.props.maxRenderWindow,\n        offset: prevState.offset,\n        windowLength: prevState.windowLength,\n      })\n    );\n    // Send paging command.\n    requestAnimationFrame(() => {\n      UIManager.dispatchViewManagerCommand(findNodeHandle(this), 'setPage', [\n        page,\n        animated,\n      ]);\n    });\n  }\n\n  /**\n   * A helper function to scroll to a specific page in the PagerView.\n   * The transition between pages will *not* be animated.\n   */\n  setPageWithoutAnimation(page: number) {\n    this.setPage(page, false);\n  }\n\n  /**\n   * A helper function to enable/disable scroll imperatively.\n   * The recommended way is using the scrollEnabled prop, however, there might\n   * be a case where an imperative solution is more useful (e.g. for not\n   * blocking an animation)\n   */\n  setScrollEnabled(scrollEnabled: boolean) {\n    UIManager.dispatchViewManagerCommand(\n      findNodeHandle(this),\n      'setScrollEnabled',\n      [scrollEnabled]\n    );\n  }\n\n  /**\n   * Compute desired render window size.\n   *\n   * Returns `offset` and `windowLength` unmodified, unless in conflict with\n   * restrictions from `buffer` or `maxRenderWindow`.\n   */\n  private computeRenderWindow(data: RenderWindowData): PagerViewState {\n    const buffer = Math.max(data.buffer ?? 1, 1);\n    let offset = Math.max(Math.min(data.offset, data.currentPage - buffer), 0);\n    let windowLength =\n      Math.max(data.offset + data.windowLength, data.currentPage + buffer + 1) -\n      offset;\n\n    let maxRenderWindow = data.maxRenderWindow ?? 0;\n    if (maxRenderWindow !== 0) {\n      maxRenderWindow = Math.max(maxRenderWindow, 1 + 2 * buffer);\n      if (windowLength > maxRenderWindow) {\n        offset = data.currentPage - Math.floor(maxRenderWindow / 2);\n        windowLength = maxRenderWindow;\n      }\n    }\n\n    return { offset, windowLength };\n  }\n\n  private onMoveShouldSetResponderCapture = () => this.isScrolling;\n\n  private onPageScroll = (event: PagerViewOnPageScrollEvent) => {\n    this.props.onPageScroll?.(event);\n    if (this.props.keyboardDismissMode === 'on-drag') {\n      Keyboard.dismiss();\n    }\n  };\n\n  private onPageScrollStateChanged = (\n    event: PageScrollStateChangedNativeEvent\n  ) => {\n    this.props.onPageScrollStateChanged?.(event);\n    this.isScrolling = event.nativeEvent.pageScrollState === 'dragging';\n  };\n\n  private onPageSelected = (event: PagerViewOnPageSelectedEvent) => {\n    const currentPage = event.nativeEvent.position;\n    this.setState((prevState) =>\n      this.computeRenderWindow({\n        buffer: this.props.buffer,\n        currentPage,\n        maxRenderWindow: this.props.maxRenderWindow,\n        offset: prevState.offset,\n        windowLength: prevState.windowLength,\n      })\n    );\n    this.props.onPageSelected?.(event);\n  };\n\n  private renderChildren(offset: number, windowLength: number) {\n    const keys: string[] = [];\n    return {\n      children: this.props.data\n        .slice(offset, offset + windowLength)\n        .map((item, index) => {\n          const key = this.props.keyExtractor(item, offset + index);\n          keys.push(key);\n          return (\n            <View collapsable={false} key={key} style={styles.pageContainer}>\n              {this.props.renderItem({ item, index: offset + index })}\n            </View>\n          );\n        }),\n      keys,\n    };\n  }\n\n  render() {\n    const { offset, windowLength } = this.state;\n    const { children, keys } = this.renderChildren(offset, windowLength);\n\n    return (\n      <PagerViewNative\n        childrenKeys={keys}\n        count={this.props.data.length}\n        offscreenPageLimit={this.props.offscreenPageLimit}\n        offset={offset}\n        onMoveShouldSetResponderCapture={this.onMoveShouldSetResponderCapture}\n        onPageScroll={this.onPageScroll}\n        onPageScrollStateChanged={this.onPageScrollStateChanged}\n        onPageSelected={this.onPageSelected}\n        orientation={this.props.orientation}\n        overdrag={this.props.overdrag}\n        pageMargin={this.props.pageMargin}\n        scrollEnabled={this.props.scrollEnabled}\n        showPageIndicator={this.props.showPageIndicator}\n        style={this.props.style}\n        transitionStyle={this.props.transitionStyle}\n      >\n        {children}\n      </PagerViewNative>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  pageContainer: { height: '100%', position: 'absolute', width: '100%' },\n});\n"]}