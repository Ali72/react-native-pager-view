{"version":3,"sources":["ViewPager.tsx"],"names":["React","requireNativeComponent","Platform","UIManager","Keyboard","ReactNative","VIEW_MANAGER_NAME","VIEW_PAGER_REF","ViewpagerViewManager","childrenWithOverriddenStyle","getViewManagerConfig","viewManagerName","ViewPager","Component","refs","getInnerViewNode","e","props","onPageScroll","OS","keyboardDismissMode","dismiss","onPageScrollStateChanged","isScrolling","nativeEvent","pageScrollState","onPageSelected","selectedPage","dispatchViewManagerCommand","findNodeHandle","Commands","setPage","setPageWithoutAnimation","scrollEnabled","setScrollEnabled","componentDidMount","initialPage","render","style","_onPageScroll","_onPageScrollStateChanged","_onPageSelected","_onMoveShouldSetResponderCapture","children"],"mappings":"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","sourcesContent":["import React, { ReactElement } from 'react';\nimport {\n  requireNativeComponent,\n  Platform,\n  UIManager,\n  Keyboard,\n} from 'react-native';\nimport ReactNative from 'react-native';\nimport type {\n  ViewPagerOnPageScrollEvent,\n  ViewPagerOnPageSelectedEvent,\n  PageScrollStateChangedNativeEvent,\n  ViewPagerProps,\n} from './types';\n\nconst VIEW_MANAGER_NAME = 'RNCViewPager';\nconst VIEW_PAGER_REF = 'viewPager';\n\nconst ViewpagerViewManager = requireNativeComponent<ViewPagerProps>(\n  VIEW_MANAGER_NAME\n);\n\nimport { childrenWithOverriddenStyle } from './utils';\n\nfunction getViewManagerConfig(viewManagerName: string) {\n  return UIManager.getViewManagerConfig(viewManagerName);\n}\n\n/**\n * Container that allows to flip left and right between child views. Each\n * child view of the `ViewPager` will be treated as a separate page\n * and will be stretched to fill the `ViewPager`.\n *\n * It is important all children are `<View>`s and not composite components.\n * You can set style properties like `padding` or `backgroundColor` for each\n * child. It is also important that each child have a `key` prop.\n *\n * Example:\n *\n * ```\n * render: function() {\n *   return (\n *     <ViewPager\n *       style={styles.viewPager}\n *       initialPage={0}>\n *       <View style={styles.pageStyle} key=\"1\">\n *         <Text>First page</Text>\n *       </View>\n *       <View style={styles.pageStyle} key=\"2\">\n *         <Text>Second page</Text>\n *       </View>\n *     </ViewPager>\n *   );\n * }\n *\n * ...\n *\n * var styles = {\n *   ...\n *   viewPager: {\n *     flex: 1\n *   },\n *   pageStyle: {\n *     alignItems: 'center',\n *     padding: 20,\n *   }\n * }\n * ```\n */\n\nexport class ViewPager extends React.Component<ViewPagerProps> {\n  isScrolling = false;\n\n  componentDidMount() {\n    // On iOS we do it directly on the native side\n    if (Platform.OS === 'android') {\n      if (this.props.initialPage != null) {\n        this.setPageWithoutAnimation(this.props.initialPage);\n      }\n    }\n  }\n\n  /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found\n   * when making Flow check .android.js files. */\n  private getInnerViewNode = (): ReactElement => {\n    return (this.refs[VIEW_PAGER_REF] as ViewPager).getInnerViewNode();\n  };\n\n  private _onPageScroll = (e: ViewPagerOnPageScrollEvent) => {\n    if (this.props.onPageScroll) {\n      this.props.onPageScroll(e);\n    }\n    // Not implemented on iOS yet\n    if (Platform.OS === 'android') {\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n        // dismissKeyboard();\n      }\n    }\n  };\n\n  private _onPageScrollStateChanged = (\n    e: PageScrollStateChangedNativeEvent\n  ) => {\n    if (this.props.onPageScrollStateChanged) {\n      this.props.onPageScrollStateChanged(e);\n    }\n    this.isScrolling = e.nativeEvent.pageScrollState === 'dragging';\n  };\n\n  private _onPageSelected = (e: ViewPagerOnPageSelectedEvent) => {\n    if (this.props.onPageSelected) {\n      this.props.onPageSelected(e);\n    }\n  };\n\n  /**\n   * A helper function to scroll to a specific page in the ViewPager.\n   * The transition between pages will be animated.\n   */\n  public setPage = (selectedPage: number) => {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      getViewManagerConfig(VIEW_MANAGER_NAME).Commands.setPage,\n      [selectedPage]\n    );\n  };\n\n  /**\n   * A helper function to scroll to a specific page in the ViewPager.\n   * The transition between pages will *not* be animated.\n   */\n  public setPageWithoutAnimation = (selectedPage: number) => {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      getViewManagerConfig(VIEW_MANAGER_NAME).Commands.setPageWithoutAnimation,\n      [selectedPage]\n    );\n  };\n\n  /**\n   * A helper function to enable/disable scroll imperatively\n   * The recommended way is using the scrollEnabled prop, however, there might be a case where a\n   * imperative solution is more useful (e.g. for not blocking an animation)\n   */\n  public setScrollEnabled = (scrollEnabled: boolean) => {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      getViewManagerConfig(VIEW_MANAGER_NAME).Commands.setScrollEnabled,\n      [scrollEnabled]\n    );\n  };\n\n  private _onMoveShouldSetResponderCapture = () => {\n    if (Platform.OS === 'ios') {\n      return this.isScrolling;\n    }\n    return false;\n  };\n\n  render() {\n    return (\n      <ViewpagerViewManager\n        {...this.props}\n        ref={VIEW_PAGER_REF}\n        style={this.props.style}\n        onPageScroll={this._onPageScroll}\n        onPageScrollStateChanged={this._onPageScrollStateChanged}\n        onPageSelected={this._onPageSelected}\n        onMoveShouldSetResponderCapture={this._onMoveShouldSetResponderCapture}\n        children={childrenWithOverriddenStyle(this.props.children)}\n      />\n    );\n  }\n}\n"]}